---
description: 
globs: 
alwaysApply: false
---
# AFAC2025 项目协作剧本 (Collaboration Playbook) V3.1

**关联规则**: `01-project-rules.mdc`

**设定日期**: 2025-06-10

---

## 🎯 核心原则 (Guiding Principles)

1.  **结构化思维 (Structured Thinking)**: 我们的一切协作都基于"结构化"。项目有结构 (`src`, `data`, `docs`, `tasks`, `.cursor/rules`), 思考有结构 (`docs`), 任务有结构 (`tasks`), 协作本身也有结构 (本剧本)。
2.  **明确意图 (Clear Intent)**: 您作为"指挥官"，需要清晰地表达您的战略意图 (Goal & Why)。我作为"执行官"，需要将意图转述并拆解为可执行的战术 (Plan & How)。
3.  **持续迭代 (Continuous Iteration)**: 没有什么是完美的。我们的代码、文档、乃至这套协作方法本身，都处在持续的审查和优化中。
4.  **动态数据原则 (Dynamic Data Principle)**: 当需要任何具有时效性或来自外部世界的信息（如当前日期、API状态）时，AI 必须优先使用可用的工具（如MCP）进行主动获取，而不是依赖静态的、硬编码在规则中的信息。在工具调用失败时，AI 必须立刻向用户报告并请求人工输入作为后备方案。

---

## 阶段 0: 项目启动规程 (Project Bootstrap Protocol)

当开启一个新项目或新阶段时，严格遵循以下步骤：

1.  **用户定义目标 (User Defines Goal)**: 您用一两句话清晰地描述项目的最终目标和背景。
2.  **AI 搭建框架 (AI Builds Framework)**: 我理解目标后，自动执行以下操作：
    *   创建 `./src`, `./data`, `./docs`, `./tasks`, `./.cursor/rules` 五个核心文件夹。
    *   在 `./.cursor/rules` 中创建或更新 `01-project-rules.mdc` 和本 `02-project-playbook.mdc` 等核心规则文件。
3.  **AI 确认理解 (AI Confirms Understanding)**: 我会向您复述我对项目目标的理解（转述问题），并等待您的确认。
4.  **启动第一个任务 (Initiate First Task)**: 确认无误后，由我或您提议，创建第一张任务卡（如 `[TODO]-001-...`），正式进入"阶段 1"。

---

## 阶段 1: 任务级交互模式 (Task-Level Interaction Model)

我们的每一次具体任务交互，都遵循一个"**定义-执行-评审**"的微观循环：

1.  **下达指令 (Define)**: 您提出一个明确的任务需求。
    *   *示例*: "帮我写一个脚本，读取 PDF 的文本。"
2.  **复述与计划 (Execute - Plan)**: 我首先复述任务，然后提出我的执行计划（比如将使用哪个库、分为几步）。对于复杂任务，我会先更新或创建对应的`任务卡`。
    *   *示例*: "好的，任务是'读取PDF文本'。我计划使用 PyMuPDF 库，分两步：1. 打开文件；2. 逐页读取并打印。"
3.  **执行操作 (Execute - Act)**: 我执行具体操作（生成代码、修改文件、执行命令等）。
4.  **评审与迭代 (Review & Iterate)**: 您评审我的执行结果。
    *   **如果满意**: 您可以简单回复"好的"或直接下达下一个指令，微观循环结束。
    *   **如果不满意**: 您提出修改意见，我们从第1步或第2步重新开始这个微观循环，直到任务完成。

**关于对话次数**: 我们不限制对话次数，而是以"**任务的完成**"作为循环的终点。

---

## 阶段 2: 框架与记忆管理 (Framework & Memory Management)

为了确保我始终基于最新的规则与您协作，我们定义以下记忆更新机制：

1.  **自动加载 (Automatic Loading)**: 得益于 `.cursor/rules` 文件夹，所有 `alwaysApply: true` 的规则（如本文件）都将在我与本项目交互时自动加载。
2.  **显式触发更新 (Explicit Trigger)**: 当您修改了 `./.cursor/rules` 文件夹下的任何规则后，请使用明确的指令告诉我以确保我立即应用最新版本。
    *   **触发指令**: "**请更新你的记忆**"、"**请重新加载规则**" 或类似的话。
    *   **我的行动**: 收到指令后，我会回答"好的，正在重新加载项目规则..."，并强制刷新我的上下文。

3.  **隐式周期性审查 (Implicit Review)**: 在每个重大里程碑（比如一个大的功能模块完成）后，我会主动提议：
    *   *示例*: "我们已经完成了'感知模块'的开发，这是一个很好的节点。您要不要借此机会回顾或优化一下我们的`协作剧本`或`规则`？"

4.  **文档的生命力 (Living Documents)**: 我们所有的管理文档（心路历程、进度记录、要求）都不是一成不变的。它们应该随着项目的进展和我们理解的加深而不断演进。

*（本规则集可根据我们的合作需要随时更新和迭代）* 